syntax = "proto3";
package game.lottery;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "lottery/params.proto";
import "lottery/round.proto";
import "lottery/txn_counter.proto";
// this line is used by starport scaffolding # 1

option go_package = "game/x/lottery/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/game/lottery/params";
  }
  // Queries a Round by index.
	rpc Round(QueryGetRoundRequest) returns (QueryGetRoundResponse) {
		option (google.api.http).get = "/game/lottery/round";
	}
// Queries a TxnCounter by index.
	rpc TxnCounter(QueryGetTxnCounterRequest) returns (QueryGetTxnCounterResponse) {
		option (google.api.http).get = "/game/lottery/txn_counter";
	}
// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetRoundRequest {}

message QueryGetRoundResponse {
	Round Round = 1 [(gogoproto.nullable) = false];
}
message QueryGetTxnCounterRequest {}

message QueryGetTxnCounterResponse {
	TxnCounter TxnCounter = 1 [(gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3
